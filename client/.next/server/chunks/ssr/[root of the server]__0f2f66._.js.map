{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Jeet/projects/React/ProFile%20AI/ProFile-AI/client/src/app/upload/page.js"],"sourcesContent":["\"use client\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../globals.css\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { ClipLoader } from \"react-spinners\";\r\n\r\nexport default function Upload() {\r\n  const [file, setFile] = useState(null); // Stores the selected file\r\n  const [message, setMessage] = useState(\"\"); // Message to show upload status\r\n  const [analysis, setAnalysis] = useState(\"\"); // AI feedback after resume analysis\r\n  const [loading, setLoading] = useState(false); // Loading state during upload\r\n  const [fileUrl, setFileUrl] = useState(\"\"); // URL of the uploaded file\r\n  const [coverLetter, setCoverLetter] = useState(\"\"); // Store cover letter\r\n\r\n  // Handles file selection\r\n  const handleFileChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  // Handles file upload\r\n  const handleUpload = async () => {\r\n    if (!file) {\r\n      setMessage(\"Please Select a File First\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setMessage(\"\");\r\n    setFileUrl(\"\"); // Clear previous file URL\r\n    setAnalysis(\"\"); // Clear previous analysis\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"resume\", file);\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/upload\",\r\n        formData,\r\n        { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n      );\r\n\r\n      setMessage(response.data.message);\r\n      console.log(\"✅ File Uploaded Successfully:\", response.data);\r\n\r\n      if (response.data.fileUrl) {\r\n        setFileUrl(response.data.fileUrl); // Store uploaded file URL\r\n      }\r\n\r\n      // Extracted text from resume\r\n      const resumeText = response.data.extractedText;\r\n\r\n      // Send extracted text for AI analysis\r\n      if (resumeText) {\r\n        await analyzeResume(resumeText); // Wait for AI response\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Upload Error:\", error);\r\n      setMessage(\"Upload Failed. Please Try Again.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handles AI analysis of resume text\r\n  const analyzeResume = async (text) => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/analyze\",\r\n        { text },\r\n        { headers: { \"Content-Type\": \"application/json\" } }\r\n      );\r\n      setAnalysis(response.data.analysis); // Store AI feedback\r\n    } catch (error) {\r\n      console.error(\"❌ AI Analysis Error:\", error);\r\n      setAnalysis(\"Failed to analyze resume. Please try again.\");\r\n    }\r\n  };\r\n\r\n  // Handles AI feedback download\r\n  const handleDownloadFeedback = () => {\r\n    if (!analysis) return;\r\n\r\n    const file = new Blob([analysis], { type: \"text/plain\" });\r\n    const fileURL = URL.createObjectURL(file);\r\n    const a = document.createElement(\"a\");\r\n    a.href = fileURL;\r\n    a.setAttribute(\"download\", \"AI_Feedback.txt\");\r\n    a.click();\r\n    URL.revokeObjectURL(fileURL);\r\n  };\r\n\r\n  // Generate AI Cover Letter\r\n  const generateCoverLetter = async () => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/cover-letter\",\r\n        { text: analysis }, // Use analyzed AI feedback\r\n        { headers: { \"Content-Type\": \"application/json\" } }\r\n      );\r\n      setCoverLetter(response.data.coverLetter);\r\n    } catch (error) {\r\n      console.error(\"Cover Letter Generation Error:\", error);\r\n      setCoverLetter(\"Failed to generate cover letter.\");\r\n    }\r\n  };\r\n\r\n  // Download Cover Letter\r\n  const handleDownloadCoverLetter = () => {\r\n    if (!coverLetter) return;\r\n\r\n    const file = new Blob([coverLetter], { type: \"text/plain\" });\r\n    const fileURL = URL.createObjectURL(file);\r\n    const a = document.createElement(\"a\");\r\n    a.href = fileURL;\r\n    a.setAttribute(\"download\", \"AI_Cover_Letter.txt\");\r\n    a.click();\r\n    URL.revokeObjectURL(fileURL);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\">\r\n      {/* Upload Form */}\r\n      <form onSubmit={(e) => e.preventDefault()}>\r\n        <h1 className=\"text-2xl font-bold mb-4\">Upload Your Resume</h1>\r\n        <input\r\n          type=\"file\"\r\n          accept=\".pdf,.doc,.docx\"\r\n          className=\"mb-4 p-2 border rounded\"\r\n          onChange={handleFileChange}\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleUpload}\r\n          className=\"px-4 py-2 bg-blue-500 text-white rounded\"\r\n          disabled={loading}\r\n        >\r\n          {loading ? \"Uploading...\" : \"Upload\"}\r\n        </button>\r\n      </form>\r\n\r\n      {/* Loading Indicator */}\r\n      {loading && (\r\n        <div className=\"flex justify-center items-center mt-3\">\r\n          <ClipLoader color=\"#3498db\" loading={loading} size={40} />\r\n        </div>\r\n      )}\r\n\r\n      {/* Upload Message */}\r\n      {message && <p className=\"mt-4\"> {message} </p>}\r\n\r\n      {/* Uploaded File Link */}\r\n      {fileUrl && (\r\n        <div className=\"mt-4\">\r\n          <p className=\"text-green-500\">File Uploaded Successfully!</p>\r\n          <a\r\n            href={fileUrl}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"text-blue-500 underline\"\r\n          >\r\n            View Uploaded Resume\r\n          </a>\r\n        </div>\r\n      )}\r\n\r\n      {/* AI Feedback */}\r\n      {analysis && (\r\n        <div className=\"mt-6 p-4 bg-blue-100 shadow rounded w-screen \">\r\n          <h2 className=\"text-lg font-bold\">AI Feedback</h2>\r\n          <ReactMarkdown className=\"text-sm\">{analysis}</ReactMarkdown>\r\n          <button\r\n            onClick={handleDownloadFeedback}\r\n            className=\"mt-2 px-4 py-2 bg-green-500 text-white rounded\"\r\n          >\r\n            Download Feedback\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}